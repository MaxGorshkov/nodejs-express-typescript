import { Hero } from "../../models/heroes/hero";

var express = require("express");
var app = express();

const heroes = [
    {name: "first", id: 1},
    {name: "second", id: 2},
    {name: app.get("env"), id: 3},
];

export abstract class IHeroService {
    abstract get(id: number): Hero;
    abstract find(): Array<Hero>;
    abstract add(hero: Hero): Hero;
}

export class HeroService implements IHeroService {
    static heroes : Array<Hero>;
    static incrementProcessId: any;

    constructor() {
        if (!HeroService.heroes) {
            HeroService.heroes = heroes;
        }

        if (!HeroService.incrementProcessId) {
            HeroService.incrementProcessId = setInterval(() => {
                this.add ( { name: "autogenerated" } );
            }
            , 2000);
        }
    }

    public find(): Array<Hero> {
        let res: Array<Hero> = HeroService.heroes;

        return res;
    }

    public get(id: number): Hero {
        let res: Hero = null;

        let filtered = HeroService.heroes.filter((item) => {
            return item.id === id;
        });

        if (filtered.length === 1) {
            res = filtered[0];
        }

        return res;
    }

    public add(hero: Hero): Hero {
        let maxId: number = 0;
        maxId = HeroService.heroes.reduce((prev: Hero, curr: Hero) => {
            if ( prev.id < curr.id ) {
                return curr;
            }

            return prev;
        }).id;

        hero.id = maxId + 1;

        HeroService.heroes.push(hero);

        return hero;
    }
  }